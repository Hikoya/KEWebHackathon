"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[895],{3978:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=n(7462),i=n(3366),s=(n(7294),n(3905)),r=["components"],o={sidebar_position:1},l="Authentication",p={unversionedId:"API - Basics/authentication",id:"API - Basics/authentication",isDocsHomePage:!1,title:"Authentication",description:"Authentication pages to authenticate authorized users",source:"@site/docs/API - Basics/authentication.md",sourceDirName:"API - Basics",slug:"/API - Basics/authentication",permalink:"/KEWebHackathon/docs/API - Basics/authentication",editUrl:"https://github.com/Hikoya/KEWebHackathon/docs/API - Basics/authentication.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/KEWebHackathon/docs/intro"},next:{title:"Products",permalink:"/KEWebHackathon/docs/API - Basics/products"}},u=[{value:"Login",id:"login",children:[],level:2},{value:"Signup",id:"signup",children:[],level:2},{value:"Logout",id:"logout",children:[],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"authentication"},"Authentication"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Authentication")," pages to authenticate authorized users"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Login the user")," -> ",(0,s.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/login")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Register new user")," -> ",(0,s.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/register")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Logout existing user")," -> ",(0,s.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/logout"))),(0,s.kt)("h2",{id:"login"},"Login"),(0,s.kt)("p",null,"Login function is implemented at ",(0,s.kt)("inlineCode",{parentName:"p"},"main.py"),":\nWhenever user presses the login button, it will make a call to ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/login")," URL endpoint and login the user by the session created by Flask."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Method: HTTP POST")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,s.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"email"),(0,s.kt)("td",{parentName:"tr",align:null},"String")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"pass"),(0,s.kt)("td",{parentName:"tr",align:null},"String")))),(0,s.kt)("p",null,"Sample input"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"email=testing123@hotmail.com\npass=iamwarrior12345\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/login", methods=["POST"])\ndef api_login():\n    if request.method == "POST":  # Only if data has been posted\n        result = request.form  # Get the data\n        email = result["email"]\n        password = result["pass"]\n        try:\n            # Try signing in the user with the given information\n            user = auth.sign_in_with_email_and_password(email, password)\n        except:\n            # If there is any error, redirect back to login\n            return Response(\n                json.dumps({"error": "Wrong username/password"}),\n                status=400,\n                mimetype="application/json",\n            )\n        session["email"] = email\n        return Response(\n            json.dumps({"success": "Successful authentication"}),\n            status=200,\n            mimetype="application/json",\n        )\n    else:\n        return Response(\n            json.dumps({"error": "Method not POST"}),\n            status=400,\n            mimetype="application/json",\n        )\n')),(0,s.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,s.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,s.kt)("inlineCode",{parentName:"p"},"400")," otherwise"),(0,s.kt)("p",null,"Sample JSON output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{"success": "Successful authentication"}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "Wrong username/password"}\n{"error": "Method not POST"}\n')),(0,s.kt)("h2",{id:"signup"},"Signup"),(0,s.kt)("p",null,"Registration function is implemented at ",(0,s.kt)("inlineCode",{parentName:"p"},"main.py"),":\nWhenever user presses the register button, it will make a call to ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/register")," URL endpoint and login the user upon successful registration."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Method: HTTP POST")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,s.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"email"),(0,s.kt)("td",{parentName:"tr",align:null},"String")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"pass"),(0,s.kt)("td",{parentName:"tr",align:null},"String")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"email=testing123@hotmail.com\npass=iamwarrior12345\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/register", methods=["POST"])\ndef api_register():\n    if request.method == "POST":  # Only if data has been posted\n        result = request.form  # Get the data submitted\n        email = result["email"]\n        password = result["pass"]\n        try:\n            # Try creating the user account using the provided data\n            auth.create_user_with_email_and_password(email, password)\n            # Login the user\n            user = auth.sign_in_with_email_and_password(email, password)\n            session["email"] = email\n            return Response(\n                json.dumps({"success": "Successful registration"}),\n                status=200,\n                mimetype="application/json",\n            )\n        except:\n            # If there is any error, display\n            return Response(\n                json.dumps({"error": "Error in registration"}),\n                status=400,\n                mimetype="application/json",\n            )\n    else:\n        return Response(\n            json.dumps({"error": "Method not POST"}),\n            status=400,\n            mimetype="application/json",\n        )\n')),(0,s.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,s.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,s.kt)("inlineCode",{parentName:"p"},"400")," otherwise"),(0,s.kt)("p",null,"Sample JSON output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{"success": "Successful registration"}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "Error in registration"}\n{"error": "Method not POST"}\n')),(0,s.kt)("h2",{id:"logout"},"Logout"),(0,s.kt)("p",null,"Logout function is implemented at ",(0,s.kt)("inlineCode",{parentName:"p"},"main.py"),":\nWhenever user presses the logout button, it will make a call to ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/logout")," URL endpoint and logout the user."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Method: HTTP GET")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/logout", methods=["GET"])\ndef api_logout():\n    if request.method == "GET":\n        # remove the email from the session if it is there\n        session.pop("email", None)\n        return Response(\n            json.dumps({"success": "Successfully logged out"}),\n            status=200,\n            mimetype="application/json",\n        )\n    else:\n        return Response(\n            json.dumps({"error": "Method not GET"}),\n            status=400,\n            mimetype="application/json",\n        )\n')),(0,s.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,s.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,s.kt)("inlineCode",{parentName:"p"},"400")," otherwise"),(0,s.kt)("p",null,"Sample JSON output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{"success": "Successfully logged out"}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "Method not GET"}\n')))}c.isMDXComponent=!0}}]);