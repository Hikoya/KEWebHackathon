"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[113],{1874:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return o},toc:function(){return u},default:function(){return c}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),s=["components"],p={sidebar_position:2},l="Products",o={unversionedId:"API - Basics/products",id:"API - Basics/products",isDocsHomePage:!1,title:"Products",description:"Product pages to view all products, specific products or checkout the existing cart.",source:"@site/docs/API - Basics/products.md",sourceDirName:"API - Basics",slug:"/API - Basics/products",permalink:"/KEWebHackathon/docs/API - Basics/products",editUrl:"https://github.com/Hikoya/KEWebHackathon/docs/API - Basics/products.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/KEWebHackathon/docs/API - Basics/authentication"},next:{title:"Authentication",permalink:"/KEWebHackathon/docs/Pages - Backend/authentication"}},u=[{value:"Add product to Database",id:"add-product-to-database",children:[],level:2},{value:"Get specific product by ID",id:"get-specific-product-by-id",children:[],level:2},{value:"Get all products",id:"get-all-products",children:[],level:2},{value:"Add item to cart",id:"add-item-to-cart",children:[],level:2},{value:"Empty cart",id:"empty-cart",children:[],level:2},{value:"Delete item from cart",id:"delete-item-from-cart",children:[],level:2},{value:"View cart",id:"view-cart",children:[],level:2},{value:"Checkout cart",id:"checkout-cart",children:[],level:2},{value:"View all orders made",id:"view-all-orders-made",children:[],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"products"},"Products"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Product")," pages to view all products, specific products or checkout the existing cart."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Add new product to database")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/addproduct")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Get specific product by ID")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/product/id/<id>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Get all products")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/products")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Add item to cart")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/products/add")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Empty cart")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/products/empty")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Delete item from cart")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/products/delete/<string:code>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"View cart")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/products/cart")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Checkout cart")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/products/checkout")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"View all orders made")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:5000/api/vieworder"))),(0,r.kt)("h2",{id:"add-product-to-database"},"Add product to Database"),(0,r.kt)("p",null,"Add function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP POST"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secretKey"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"price"),(0,r.kt)("td",{parentName:"tr",align:null},"Number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sku"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"image"),(0,r.kt)("td",{parentName:"tr",align:null},"String")))),(0,r.kt)("p",null,"Sample input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"secretKey=supersecret123\nname=Apple\nprice=2.0\nsku=AP200\nimage=https://commons.wikimedia.org/wiki/File:Honeycrisp-Apple.jpg\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/addproduct", methods=["POST"])\ndef api_addproduct():\n    if authenticated():\n        if "secretKey" in request.form:\n            if request.form["secretKey"] == app.secret_key:\n                name = request.form["name"]\n                price = float(request.form["price"])\n                sku = request.form["sku"]\n                image = request.form["image"]\n                created_at = time.time()\n                if (\n                    created_at\n                    and image\n                    and sku\n                    and price\n                    and name\n                    and request.method == "POST"\n                ):\n                    try:\n                        data = {\n                            "name": name,\n                            "price": price,\n                            "sku": sku,\n                            "image": image,\n                            "created_at": created_at,\n                        }\n                        rec = db.child("products").push(\n                            data\n                        )  # push data to firebase realtime database\n                        data_typesense = {\n                            "id": rec["name"],\n                            "name": name,\n                            "price": price,\n                            "sku": sku,\n                            "image": image,\n                            "created_at": created_at\n                        }\n                        client.collections["products"].documents.create(data_typesense)\n                        return Response(\n                            json.dumps({"success": True}),\n                            status=200,\n                            mimetype="application/json",\n                        )\n                    except Exception as e:\n                        return Response(\n                            json.dumps({"error": e}),\n                            status=400,\n                            mimetype="application/json",\n                        )\n                else:\n                    return Response(\n                        json.dumps({"error": "Missing data"}),\n                        status=400,\n                        mimetype="application/json",\n                    )\n            else:\n                return Response(\n                    json.dumps({"error": "User not authenticated"}),\n                    status=403,\n                    mimetype="application/json",\n                )\n        else:\n            return Response(\n                json.dumps({"error": "User not authenticated"}),\n                status=403,\n                mimetype="application/json",\n            )\n    else:\n        return Response(\n                json.dumps({"error": "User not authenticated"}),\n                status=403,\n                mimetype="application/json",\n            )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{"success": True}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n{"error": "Missing data"}\n')),(0,r.kt)("h2",{id:"get-specific-product-by-id"},"Get specific product by ID"),(0,r.kt)("p",null,"Retrieve function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP GET"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"String")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"id=-MqKfpAsfghPCKAu54q\n\n/api/products/id/-MqKfpAsfghPCKAu54q\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/id/<id>", methods=["GET"])\ndef api_product(id):\n    if authenticated():\n        try:\n            products = client.collections["products"].documents[id].retrieve()\n            try:\n                return Response(\n                    json.dumps({"success": products}),\n                    status=200,\n                    mimetype="application/json",\n                )\n            except Exception as e:\n                return Response(\n                    json.dumps({"error": e}), status=400, mimetype="application/json"\n                )\n        except Exception as e:\n            return Response(\n                json.dumps({"error": "Product not found"}),\n                status=200,\n                mimetype="application/json",\n            )\n    else:\n        return Response(\n            json.dumps({"error": "User not authenticated"}),\n            status=403,\n            mimetype="application/json",\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with item retrieved from the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n   "success":{\n      "created_at":1638871289.549649,\n      "id":"-MqKfpAsfghPCKAu54q",\n      "image":"https://assets.adidas.com/images/h_840,f_auto,q_auto:sensitive,fl_lossy,c_fill,g_auto/e698609062b1453eacdaaa480123bd10_9366/ADVANTAGE_K_White_EF0213_01_standard.jpg",\n      "name":"Shoes",\n      "price":100.0,\n      "sku":"SH100"\n   }\n}\n{"error": "No products found"}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"get-all-products"},"Get all products"),(0,r.kt)("p",null,"Retrieve function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP GET"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products", methods=["GET"])\ndef api_products():\n    try:\n        if request.method == "GET":\n            if authenticated():\n                try:\n                    products = db.child("products").get()\n                    output = []\n                    for p in products.each():\n                        output.append(\n                            {\n                                "id": p.key(),\n                                "name": p.val()["name"],\n                                "price": p.val()["price"],\n                                "sku": p.val()["sku"],\n                                "image": p.val()["image"],\n                                "created_at": p.val()["created_at"]\n                            }\n                        )\n                    return Response(\n                        json.dumps({"success": output}),\n                        status=200,\n                        mimetype="application/json",\n                    )\n                except:\n                    return Response(\n                        json.dumps({"error": "No products found"}),\n                        status=200,\n                        mimetype="application/json",\n                    )\n            else:\n                return Response(\n                    json.dumps({"error": "User not authenticated"}),\n                    status=403,\n                    mimetype="application/json",\n                )\n    except Exception as e:\n        return Response(\n            json.dumps({"error": e}), status=400, mimetype="application/json"\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with all the products available from the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n   "success":[\n      {\n         "created_at":1638871289.549649,\n         "id":"-MqKfpAsfghPCKAu54q",\n         "image":"https://assets.adidas.com/images/h_840,f_auto,q_auto:sensitive,fl_lossy,c_fill,g_auto/e698609062b1453eacdaaa480123bd10_9366/ADVANTAGE_K_White_EF0213_01_standard.jpg",\n         "name":"Shoes",\n         "price":100.0,\n         "sku":"SH100"\n      },\n      {\n         "created_at":1638871389.549649,\n         "id":"-MqKfpoAsglStrAu3qv",\n         "image":"https://images-na.ssl-images-amazon.com/images/I/71lA3a2cpPL.__AC_SX300_SY300_QL70_ML2_.jpg",\n         "name":"Headphone",\n         "price":400.0,\n         "sku":"HP400"\n      },\n      {\n         "created_at":1638871189.549649,\n         "id":"-MqKfpoajSCASKAu3qv",\n         "image":"https://www.americantourister.com.sg/dw/image/v2/AAWQ_PRD/on/demandware.static/-/Sites-American-Tourister/default/dw9f3d36bc/images/frontec-spinner-exp-tsa/hi-res/134992_1834_hi-res_FRONT34_1.jpg?sw=500&sh=750",\n         "name":"American Tourist",\n         "price":12000.0,\n         "sku":"AT1200"\n      },\n      {\n         "created_at":1638893839.089349,\n         "id":"-MqKfpoajSrRPCKAu3qv",\n         "image":"https://minnetonkaorchards.com/wp-content/uploads/2021/04/Bright-Red-Apple.jpg",\n         "name":"Apple",\n         "price":2.0,\n         "sku":"AP20"\n      },\n      {\n         "created_at":1638893978.2046132,\n         "id":"-MqKgMnAHcY4Ly6geZMC",\n         "image":"https://dovemed-prod-k8s.s3.amazonaws.com/media/images/bartlett-pear-1269879.height-400.width-750.png",\n         "name":"Pear",\n         "price":2.0,\n         "sku":"PE20"\n      },\n      {\n         "created_at":1638979318.7502878,\n         "id":"-MqPlvNcGVcOYCdK03TO",\n         "image":"https://i.redd.it/z60j3az3pos01.jpg",\n         "name":"Orange",\n         "price":2.0,\n         "sku":"OR20"\n      }\n   ]\n}\n{"error": "No products found"}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"add-item-to-cart"},"Add item to cart"),(0,r.kt)("p",null,"Add function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP POST"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"quantity"),(0,r.kt)("td",{parentName:"tr",align:null},"Number")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"name=-MqKfpAsfghPCKAu54q\nquantity=2\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/add", methods=["POST"])\ndef api_add_to_cart():\n    if authenticated():\n        _quantity = int(request.form["quantity"])\n        _id = request.form["name"]\n\n        try:\n            products = client.collections["products"].documents[_id].retrieve()\n            try:\n                itemArray = {\n                    _id: {\n                        "id": _id,\n                        "name": products["name"],\n                        "sku": products["sku"],\n                        "quantity": _quantity,\n                        "price": products["price"],\n                        "image": products["image"],\n                        "total_price": _quantity * products["price"]\n                    }\n                }\n\n                all_total_price = 0\n                all_total_quantity = 0\n                total_items = []\n\n                session.modified = True\n                if "cart_item" in session:\n                    if _id in session["cart_item"]:\n                        for key, value in session["cart_item"].items():\n                            if _id == key:\n                                old_quantity = session["cart_item"][key]["quantity"]\n                                total_quantity = old_quantity + _quantity\n                                session["cart_item"][key]["quantity"] = total_quantity\n                                session["cart_item"][key]["total_price"] = (\n                                    total_quantity * products["price"]\n                                )\n                    else:\n                        session["cart_item"] = array_merge(\n                            session["cart_item"], itemArray\n                        )\n\n                    for key, value in session["cart_item"].items():\n                        individual_quantity = int(session["cart_item"][key]["quantity"])\n                        individual_price = float(\n                            session["cart_item"][key]["total_price"]\n                        )\n                        all_total_quantity = all_total_quantity + individual_quantity\n                        all_total_price = all_total_price + individual_price\n\n                else:\n                    session["cart_item"] = itemArray\n                    all_total_quantity = all_total_quantity + _quantity\n                    all_total_price = all_total_price + _quantity * products["price"]\n\n                session["all_total_quantity"] = all_total_quantity\n                session["all_total_price"] = all_total_price\n\n                for item in session["cart_item"].items():\n                    total_items.append(item)\n\n                order_data = {\n                    "email": session["email"],\n                    "items": total_items,\n                    "all_total_quantity": all_total_quantity,\n                    "all_total_price": all_total_price,\n                }\n                return Response(\n                    json.dumps({"success": order_data}),\n                    status=200,\n                    mimetype="application/json",\n                )\n            except Exception as e:\n                return Response(\n                    json.dumps({"error": e}), status=400, mimetype="application/json"\n                )\n        except Exception as e:\n            return Response(\n                json.dumps({"error": e}), status=400, mimetype="application/json"\n            )\n    else:\n        return Response(\n            json.dumps({"error": "User not authenticated"}),\n            status=403,\n            mimetype="application/json",\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with the items in the cart"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n   "success":{\n      "all_total_price":200.0,\n      "all_total_quantity":2,\n      "email":"chungloong@hotmail.com",\n      "items":[\n         [\n            "-MqKfpAsfghPCKAu54q",\n            {\n               "id":"-MqKfpAsfghPCKAu54q",\n               "image":"https://assets.adidas.com/images/h_840,f_auto,q_auto:sensitive,fl_lossy,c_fill,g_auto/e698609062b1453eacdaaa480123bd10_9366/ADVANTAGE_K_White_EF0213_01_standard.jpg",\n               "name":"Shoes",\n               "price":100.0,\n               "quantity":2,\n               "sku":"SH100",\n               "total_price":200.0\n            }\n         ]\n      ]\n   }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"empty-cart"},"Empty cart"),(0,r.kt)("p",null,"Empty cart function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP GET"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/empty")\ndef api_empty_cart():\n    if authenticated():\n        try:\n            email = session["email"]\n            session.clear()\n            session["email"] = email\n            return Response(\n                json.dumps({"success": "Successfully emptied cart"}),\n                status=200,\n                mimetype="application/json",\n            )\n        except Exception as e:\n            return Response(\n                json.dumps({"error": e}), status=400, mimetype="application/json"\n            )\n    else:\n        return Response(\n            json.dumps({"error": "User not authenticated"}),\n            status=403,\n            mimetype="application/json",\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{"success": "Successfully emptied cart"}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"delete-item-from-cart"},"Delete item from cart"),(0,r.kt)("p",null,"Delete function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP GET"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"quantity"),(0,r.kt)("td",{parentName:"tr",align:null},"Number")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"id=-MqKfpAsfghPCKAu54q\n\n/api/products/delete/-MqKfpAsfghPCKAu54q\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/delete/<string:code>")\ndef api_delete_product(code):\n    if authenticated():\n        try:\n            all_total_price = 0\n            all_total_quantity = 0\n            session.modified = True\n            total_items = []\n\n            if "cart_item" in session:\n\n                for item in session["cart_item"].items():\n                    if item[0] == code:\n                        session["cart_item"].pop(item[0], None)\n                        break\n                    else:\n                        continue\n\n                for item in session["cart_item"].items():\n                    total_items.append(item)\n\n                for key, value in session["cart_item"].items():\n                    individual_quantity = int(session["cart_item"][key]["quantity"])\n                    individual_price = float(session["cart_item"][key]["total_price"])\n                    all_total_quantity = all_total_quantity + individual_quantity\n                    all_total_price = all_total_price + individual_price\n\n                if all_total_quantity == 0:\n                    email = session["email"]\n                    session.clear()\n\n                    session["email"] = email\n                else:\n                    session["all_total_quantity"] = all_total_quantity\n                    session["all_total_price"] = all_total_price\n\n            order_data = {\n                "email": session["email"],\n                "items": total_items,\n                "all_total_quantity": all_total_quantity,\n                "all_total_price": all_total_price,\n            }\n            return Response(\n                json.dumps({"success": order_data}),\n                status=200,\n                mimetype="application/json",\n            )\n        except Exception as e:\n            return Response(\n                json.dumps({"error": e}), status=400, mimetype="application/json"\n            )\n    else:\n        return Response(\n            json.dumps({"error": "User not authenticated"}),\n            status=403,\n            mimetype="application/json",\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with the existing item removed from cart"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n    "success": {\n        "all_total_price": 400.0,\n        "all_total_quantity": 1,\n        "email": "chungloong@hotmail.com",\n        "items": [\n            ["-MqKfpoAsglStrAu3qv", {\n                "id": "-MqKfpoAsglStrAu3qv",\n                "image": "https://images-na.ssl-images-amazon.com/images/I/71lA3a2cpPL.__AC_SX300_SY300_QL70_ML2_.jpg",\n                "name": "Headphone",\n                "price": 400.0,\n                "quantity": 1,\n                "sku": "HP400",\n                "total_price": 400.0\n            }]\n        ]\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"view-cart"},"View cart"),(0,r.kt)("p",null,"View function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP GET"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/cart")\ndef api_cart():\n    if authenticated():\n        try:\n            all_total_price = 0\n            all_total_quantity = 0\n            session.modified = True\n\n            total_items = []\n\n            if "cart_item" in session:\n                for item in session["cart_item"].items():\n                    total_items.append(item)\n\n                for key, value in session["cart_item"].items():\n                    individual_quantity = int(session["cart_item"][key]["quantity"])\n                    individual_price = float(session["cart_item"][key]["total_price"])\n                    all_total_quantity = all_total_quantity + individual_quantity\n                    all_total_price = all_total_price + individual_price\n\n            order_data = {\n                "email": session["email"],\n                "items": total_items,\n                "all_total_quantity": all_total_quantity,\n                "all_total_price": all_total_price,\n            }\n            return Response(\n                json.dumps({"success": order_data}),\n                status=200,\n                mimetype="application/json",\n            )\n        except Exception as e:\n            return Response(\n                json.dumps({"error": e}), status=400, mimetype="application/json"\n            )\n    else:\n        return Response(\n            json.dumps({"error": "User not authenticated"}),\n            status=403,\n            mimetype="application/json",\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with the items in the cart"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n    "success": {\n        "all_total_price": 400.0,\n        "all_total_quantity": 1,\n        "email": "chungloong@hotmail.com",\n        "items": [\n            ["-MqKfpoAsglStrAu3qv", {\n                "id": "-MqKfpoAsglStrAu3qv",\n                "image": "https://images-na.ssl-images-amazon.com/images/I/71lA3a2cpPL.__AC_SX300_SY300_QL70_ML2_.jpg",\n                "name": "Headphone",\n                "price": 400.0,\n                "quantity": 1,\n                "sku": "HP400",\n                "total_price": 400.0\n            }]\n        ]\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"checkout-cart"},"Checkout cart"),(0,r.kt)("p",null,"Checkout cart function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP POST"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"phone"),(0,r.kt)("td",{parentName:"tr",align:null},"Number")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup",metastring:"title=Input",title:"Input"},"name=Yunus\naddress=812 Yishun 15-22\nphone=81234567\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/products/checkout", methods=["GET", "POST"])\ndef api_checkout():\n    if authenticated():\n        if request.method == "GET":\n            return Response(\n                json.dumps({"error": "Method not POST"}),\n                status=400,\n                mimetype="application/json",\n            )\n        else:\n            name = request.form["name"]\n            address = request.form["address"]\n            phone = request.form["phone"]\n            created_at = time.time()\n            try:\n                if (\n                    "cart_item"\n                    and "all_total_quantity"\n                    and "all_total_price" in session\n                ):\n                    order_data = {\n                        "name": name,\n                        "address": address,\n                        "phone": phone,\n                        "email": session["email"],\n                        "created_at": created_at,\n                        "items": session["cart_item"],\n                        "total_quantity": session["all_total_quantity"],\n                        "total_price": session["all_total_price"]\n                    }\n                    try:\n                        rec = db.child("orders").push(order_data)\n                        email = session[\n                            "email"\n                        ]  # clear cart when order placed successfully\n                        session.clear()\n                        session["email"] = email\n                        return Response(\n                            json.dumps({"success": rec["name"]}),\n                            status=200,\n                            mimetype="application/json",\n                        )\n                    except Exception as e:\n                        return Response(\n                            json.dumps({"error": e}),\n                            status=400,\n                            mimetype="application/json",\n                        )\n                else:\n                    return Response(\n                        json.dumps({"error": "No items in cart"}),\n                        status=400,\n                        mimetype="application/json",\n                    )\n            except Exception as e:\n                return Response(\n                    json.dumps({"error": e}), status=400, mimetype="application/json"\n                )\n    else:\n        return Response(\n            json.dumps({"error": "User not authenticated"}),\n            status=403,\n            mimetype="application/json",\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with the new order number placed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n    "success": "-MqQG7lA749UQiTmRqPT"\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')),(0,r.kt)("h2",{id:"view-all-orders-made"},"View all orders made"),(0,r.kt)("p",null,"View all function is implemented at ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Method: HTTP GET"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Require user to be authenticated first")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},'@app.route("/api/vieworder", methods=["GET"])\ndef api_vieworder():\n    try:\n        if request.method == "GET":\n            if authenticated():\n                try:\n                    products = db.child("orders").get()\n                    output = []\n                    for p in products.each():\n                        if p.val()[\'email\'] == session[\'email\']:\n                            output.append(\n                                {\n                                    "id": p.key(),\n                                    "name": p.val()["name"],\n                                    "phone": p.val()["phone"],\n                                    "address": p.val()["address"],\n                                    "total_price": p.val()["total_price"],\n                                    "total_quantity": p.val()["total_quantity"],\n                                    "items": p.val()["items"],\n                                    "created_at": p.val()["created_at"]\n                                }\n                            )\n                    return Response(\n                            json.dumps({"success": output}),\n                            status=200,\n                            mimetype="application/json",\n                        )\n                except:\n                    return Response(\n                        json.dumps({"error": "No orders"}),\n                        status=400,\n                        mimetype="application/json",\n                    )\n            else:\n                return Response(\n                    json.dumps({"error": "User not authenticated"}),\n                    status=403,\n                    mimetype="application/json",\n                )\n    except Exception as e:\n        return Response(\n            json.dumps({"error": e}), status=400, mimetype="application/json"\n        )\n')),(0,r.kt)("p",null,"The response will be a JSON output with a HTTP Status code, showing ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," on success and ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," otherwise"),(0,r.kt)("p",null,"Sample JSON output",(0,r.kt)("br",{parentName:"p"}),"\n","Returns output with all the orders placed under the user. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Success",title:"Success"},'{\n   "success":[\n      {\n         "address":"812 Yishun 15-22",\n         "created_at":1638987499.6712189,\n         "id":"-MqQG7lA749UQiTmRqPT",\n         "items":{\n            "-MqKfpoAsglStrAu3qv":{\n               "id":"-MqKfpoAsglStrAu3qv",\n               "image":"https://images-na.ssl-images-amazon.com/images/I/71lA3a2cpPL.__AC_SX300_SY300_QL70_ML2_.jpg",\n               "name":"Headphone",\n               "price":400.0,\n               "quantity":1,\n               "sku":"HP400",\n               "total_price":400.0\n            }\n         },\n         "name":"Yunus",\n         "phone":"81234567",\n         "total_price":400.0,\n         "total_quantity":1\n      }\n   ]\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Failure",title:"Failure"},'{"error": "User not authenticated"}\n')))}c.isMDXComponent=!0}}]);